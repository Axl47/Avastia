/// <reference types="node" />
export { playlist_info, video_basic_info, video_info, decipher_info, yt_validate, extractID, YouTube, YouTubeStream } from './YouTube';
export { spotify, sp_validate, refreshToken, is_expired, Spotify } from './Spotify';
export { soundcloud, so_validate, SoundCloud, SoundCloudStream, getFreeClientID } from './SoundCloud';
export { setToken } from './token';
interface SearchOptions {
    limit?: number;
    source?: {
        youtube?: 'video' | 'playlist' | 'channel';
        spotify?: 'album' | 'playlist' | 'track';
        soundcloud?: 'tracks' | 'playlists' | 'albums';
    };
}
import { YouTubeStream, SoundCloudStream, YouTube, SoundCloud, Spotify } from '.';
import { InfoData, StreamOptions } from './YouTube/stream';
import { SoundCloudTrack } from './SoundCloud/classes';
import { EventEmitter } from 'stream';
/**
 * Main stream Command for streaming through various sources
 * @param url The video / track url to make stream of
 * @param options contains quality, cookie and proxy to set for stream
 * @returns YouTube / SoundCloud Stream to play
 */
export declare function stream(url: string, options?: StreamOptions): Promise<YouTubeStream | SoundCloudStream>;
/**
 *  Main Search Command for searching through various sources
 * @param query string to search.
 * @param options contains limit and source to choose.
 * @returns Array of YouTube or Spotify or SoundCloud
 */
export declare function search(query: string, options?: SearchOptions): Promise<YouTube[] | Spotify[] | SoundCloud[]>;
/**
 *  stream Command for streaming through various sources using data from video_info or soundcloud
 *  SoundCloud Track is only supported
 * @param info video_info data or SoundCloud Track data.
 * @param options contains quality, cookie and proxy to set for stream
 * @returns YouTube / SoundCloud Stream to play
 */
export declare function stream_from_info(info: InfoData | SoundCloudTrack, options?: StreamOptions): Promise<YouTubeStream | SoundCloudStream>;
/**
 * Command to validate the provided url. It checks whether it supports play-dl or not.
 * @param url url to validate
 * @returns On failure, returns false else type of url.
 */
export declare function validate(url: string): Promise<'so_playlist' | 'so_track' | 'sp_track' | 'sp_album' | 'sp_playlist' | 'yt_video' | 'yt_playlist' | 'search' | false>;
/**
 * Authorization interface for Spotify and SoundCloud.
 */
export declare function authorization(): void;
export declare function attachListeners(player: EventEmitter, resource: YouTubeStream | SoundCloudStream): void;
//# sourceMappingURL=index.d.ts.map