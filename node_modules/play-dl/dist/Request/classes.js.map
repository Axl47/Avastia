{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../play-dl/Request/classes.ts"],"names":[],"mappings":"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","sourcesContent":["import tls, { TLSSocket } from 'tls';\r\nimport { URL } from 'url';\r\n\r\ninterface ProxyOptions extends tls.ConnectionOptions {\r\n    method: 'GET';\r\n    headers?: Object;\r\n}\r\n\r\nexport class Proxy {\r\n    parsed_url: URL;\r\n    statusCode: number;\r\n    rawHeaders: string;\r\n    headers: Object;\r\n    body: string;\r\n    socket: TLSSocket;\r\n    sentHeaders: string;\r\n    private options: ProxyOptions;\r\n    constructor(parsed_url: URL, options: ProxyOptions) {\r\n        this.parsed_url = parsed_url;\r\n        this.sentHeaders = '';\r\n        this.statusCode = 0;\r\n        this.rawHeaders = '';\r\n        this.body = '';\r\n        this.headers = {};\r\n        this.options = options;\r\n        this.socket = tls.connect(\r\n            {\r\n                host: this.parsed_url.hostname,\r\n                port: Number(this.parsed_url.port) || 443,\r\n                socket: options.socket,\r\n                rejectUnauthorized: false\r\n            },\r\n            () => this.onConnect()\r\n        );\r\n        if (options.headers) {\r\n            for (const [key, value] of Object.entries(options.headers)) {\r\n                this.sentHeaders += `${key}: ${value}\\r\\n`;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onConnect() {\r\n        this.socket.write(\r\n            `${this.options.method} ${this.parsed_url.pathname}${this.parsed_url.search} HTTP/1.1\\r\\n` +\r\n                `Host: ${this.parsed_url.hostname}\\r\\n` +\r\n                this.sentHeaders +\r\n                `Connection: close\\r\\n` +\r\n                `\\r\\n`\r\n        );\r\n    }\r\n\r\n    private parseHeaders() {\r\n        const head_arr = this.rawHeaders.split('\\r\\n');\r\n        this.statusCode = Number(head_arr.shift()?.split(' ')[1]) ?? -1;\r\n        for (const head of head_arr) {\r\n            let [key, value] = head.split(': ');\r\n            if (!value) break;\r\n            key = key.trim().toLowerCase();\r\n            value = value.trim();\r\n            if (Object.keys(this.headers).includes(key)) {\r\n                let val = (this.headers as any)[key];\r\n                if (typeof val === 'string') val = [val];\r\n                Object.assign(this.headers, { [key]: [...val, value] });\r\n            } else Object.assign(this.headers, { [key]: value });\r\n        }\r\n    }\r\n\r\n    fetch(): Promise<Proxy> {\r\n        return new Promise((resolve, reject) => {\r\n            this.socket.setEncoding('utf-8');\r\n            this.socket.once('error', (err) => reject(err));\r\n            this.socket.on('data', (chunk: string) => {\r\n                if (this.rawHeaders.length === 0) {\r\n                    this.rawHeaders = chunk;\r\n                    this.parseHeaders();\r\n                } else {\r\n                    const arr = chunk.split('\\r\\n');\r\n                    if (arr.length > 1 && arr[0].length < 5) arr.shift();\r\n                    this.body += arr.join('');\r\n                }\r\n            });\r\n            this.socket.on('end', () => {\r\n                resolve(this);\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}