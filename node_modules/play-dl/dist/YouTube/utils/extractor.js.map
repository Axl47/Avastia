{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProxyOptions as Proxy, request } from './../../Request/index';\r\nimport { format_decipher } from './cipher';\r\nimport { YouTubeVideo } from '../classes/Video';\r\nimport { YouTubePlayList } from '../classes/Playlist';\r\nimport { InfoData } from '../stream';\r\n\r\ninterface InfoOptions {\r\n    proxy?: Proxy[];\r\n}\r\n\r\ninterface PlaylistOptions {\r\n    incomplete?: boolean;\r\n    proxy?: Proxy[];\r\n}\r\n\r\nconst video_id_pattern = /^[a-zA-Z\\d_-]{11,12}$/;\r\nconst playlist_id_pattern = /^PL[a-zA-Z\\d_-]{16,41}$/;\r\nconst DEFAULT_API_KEY = 'AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8';\r\nconst video_pattern =\r\n    /^((?:https?:)?\\/\\/)?(?:(?:www|m)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w\\-]+\\?v=|embed\\/|v\\/)?)([\\w\\-]+)(\\S+)?$/;\r\nconst playlist_pattern =\r\n    /^((?:https?:)?\\/\\/)?(?:(?:www|m)\\.)?(youtube\\.com)\\/(?:(playlist|watch))(.*)?((\\?|\\&)list=)PL[a-zA-Z\\d_-]{16,41}(.*)?$/;\r\n/**\r\n * Command to validate a YouTube url\r\n * @param url Url for validation\r\n * @returns type of url or false.\r\n */\r\nexport function yt_validate(url: string): 'playlist' | 'video' | 'search' | false {\r\n    if (url.indexOf('list=') === -1) {\r\n        if (url.startsWith('https')) {\r\n            if (url.match(video_pattern)) {\r\n                let id: string;\r\n                if (url.includes('youtu.be/')) id = url.split('youtu.be/')[1].split(/(\\?|\\/|&)/)[0];\r\n                else if (url.includes('youtube.com/embed/'))\r\n                    id = url.split('youtube.com/embed/')[1].split(/(\\?|\\/|&)/)[0];\r\n                else if (url.includes('youtube.com/shorts/'))\r\n                    id = url.split('youtube.com/shorts/')[1].split(/(\\?|\\/|&)/)[0];\r\n                else id = url.split('watch?v=')[1].split(/(\\?|\\/|&)/)[0];\r\n                if (id.match(video_id_pattern)) return 'video';\r\n                else return false;\r\n            } else return false;\r\n        } else {\r\n            if (url.match(video_id_pattern)) return 'video';\r\n            else if (url.match(playlist_id_pattern)) return 'playlist';\r\n            else return 'search';\r\n        }\r\n    } else {\r\n        if (!url.match(playlist_pattern)) return false;\r\n        else return 'playlist';\r\n    }\r\n}\r\n/**\r\n * Function to extract ID of YouTube url.\r\n * @param url ID or url of YouTube\r\n * @returns ID of video or playlist.\r\n */\r\nexport function extractID(url: string): string {\r\n    const check = yt_validate(url);\r\n    if (!check || check === 'search') throw new Error('This is not a YouTube url or videoId or PlaylistID');\r\n    if (url.startsWith('https')) {\r\n        if (url.indexOf('list=') === -1) {\r\n            let video_id: string;\r\n            if (url.includes('youtu.be/')) video_id = url.split('youtu.be/')[1].split(/(\\?|\\/|&)/)[0];\r\n            else if (url.includes('youtube.com/embed/'))\r\n                video_id = url.split('youtube.com/embed/')[1].split(/(\\?|\\/|&)/)[0];\r\n            else if (url.includes('youtube.com/shorts/'))\r\n                video_id = url.split('youtube.com/shorts/')[1].split(/(\\?|\\/|&)/)[0];\r\n            else video_id = url.split('watch?v=')[1].split(/(\\?|\\/|&)/)[0];\r\n            return video_id;\r\n        } else {\r\n            return url.split('list=')[1].split('&')[0];\r\n        }\r\n    } else return url;\r\n}\r\n/**\r\n * Basic function to get data from a YouTube url or ID.\r\n * @param url YouTube url or ID\r\n * @param options cookie and proxy parameters to add\r\n * @returns Data containing video_details, LiveStreamData and formats of video url.\r\n */\r\nexport async function video_basic_info(url: string, options: InfoOptions = {}) {\r\n    if (yt_validate(url) !== 'video') throw new Error('This is not a YouTube Watch URL');\r\n    const video_id: string = extractID(url);\r\n    const new_url = `https://www.youtube.com/watch?v=${video_id}&has_verified=1`;\r\n    const body = await request(new_url, {\r\n        proxies: options.proxy ?? [],\r\n        headers: { 'accept-language': 'en-US,en-IN;q=0.9,en;q=0.8,hi;q=0.7' },\r\n        cookies: true\r\n    });\r\n    const player_data = body\r\n        .split('var ytInitialPlayerResponse = ')?.[1]\r\n        ?.split(';</script>')[0]\r\n        .split(/; (var|const|let)/)[0];\r\n    if (!player_data) throw new Error('Initial Player Response Data is undefined.');\r\n    const initial_data = body\r\n        .split('var ytInitialData = ')?.[1]\r\n        ?.split(';</script>')[0]\r\n        .split(/; (var|const|let)/)[0];\r\n    if (!initial_data) throw new Error('Initial Response Data is undefined.');\r\n    const player_response = JSON.parse(player_data);\r\n    const initial_response = JSON.parse(initial_data);\r\n    if (player_response.playabilityStatus.status !== 'OK')\r\n        throw new Error(\r\n            `While getting info from url\\n${\r\n                player_response.playabilityStatus.errorScreen.playerErrorMessageRenderer?.reason.simpleText ??\r\n                player_response.playabilityStatus.errorScreen.playerKavRenderer?.reason.simpleText\r\n            }`\r\n        );\r\n    const badge =\r\n        initial_response.contents.twoColumnWatchNextResults.results.results.contents[1]?.videoSecondaryInfoRenderer\r\n            ?.owner?.videoOwnerRenderer?.badges &&\r\n        initial_response.contents.twoColumnWatchNextResults.results.results.contents[1]?.videoSecondaryInfoRenderer\r\n            ?.owner?.videoOwnerRenderer?.badges[0];\r\n    const html5player = `https://www.youtube.com${body.split('\"jsUrl\":\"')[1].split('\"')[0]}`;\r\n    const related: string[] = [];\r\n    initial_response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results.forEach(\r\n        (res: any) => {\r\n            if (res.compactVideoRenderer)\r\n                related.push(`https://www.youtube.com/watch?v=${res.compactVideoRenderer.videoId}`);\r\n        }\r\n    );\r\n    const format = [];\r\n    const vid = player_response.videoDetails;\r\n    const microformat = player_response.microformat.playerMicroformatRenderer;\r\n    const video_details = new YouTubeVideo({\r\n        id: vid.videoId,\r\n        url: `https://www.youtube.com/watch?v=${vid.videoId}`,\r\n        title: vid.title,\r\n        description: vid.shortDescription,\r\n        duration: Number(vid.lengthSeconds),\r\n        duration_raw: parseSeconds(Number(vid.lengthSeconds)),\r\n        uploadedAt: microformat.publishDate,\r\n        thumbnail: vid.thumbnail.thumbnails[vid.thumbnail.thumbnails.length - 1],\r\n        channel: {\r\n            name: vid.author,\r\n            id: vid.channelId,\r\n            url: `https://www.youtube.com/channel/${vid.channelId}`,\r\n            verified: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes('verified'))\r\n        },\r\n        views: vid.viewCount,\r\n        tags: vid.keywords,\r\n        averageRating: vid.averageRating,\r\n        live: vid.isLiveContent,\r\n        private: vid.isPrivate\r\n    });\r\n    format.push(...(player_response.streamingData.formats ?? []));\r\n    format.push(...(player_response.streamingData.adaptiveFormats ?? []));\r\n    const LiveStreamData = {\r\n        isLive: video_details.live,\r\n        dashManifestUrl: player_response.streamingData?.dashManifestUrl ?? null,\r\n        hlsManifestUrl: player_response.streamingData?.hlsManifestUrl ?? null\r\n    };\r\n    return {\r\n        LiveStreamData,\r\n        html5player,\r\n        format,\r\n        video_details,\r\n        related_videos: related\r\n    };\r\n}\r\n/**\r\n * Function to convert seconds to [hour : minutes : seconds] format\r\n * @param seconds seconds to convert\r\n * @returns [hour : minutes : seconds] format\r\n */\r\nfunction parseSeconds(seconds: number): string {\r\n    const d = Number(seconds);\r\n    const h = Math.floor(d / 3600);\r\n    const m = Math.floor((d % 3600) / 60);\r\n    const s = Math.floor((d % 3600) % 60);\r\n\r\n    const hDisplay = h > 0 ? (h < 10 ? `0${h}` : h) + ':' : '';\r\n    const mDisplay = m > 0 ? (m < 10 ? `0${m}` : m) + ':' : '00:';\r\n    const sDisplay = s > 0 ? (s < 10 ? `0${s}` : s) : '00';\r\n    return hDisplay + mDisplay + sDisplay;\r\n}\r\n/**\r\n * Function which gets data from video_basic_info and deciphers it if it contains signatures.\r\n * @param url YouTube Video URL\r\n * @param options cookie and proxy parameters to add\r\n * @returns Data containing video_details, LiveStreamData and formats of video url.\r\n */\r\nexport async function video_info(url: string, options: InfoOptions = {}) {\r\n    const data = await video_basic_info(url, options);\r\n    if (data.LiveStreamData.isLive === true && data.LiveStreamData.hlsManifestUrl !== null) {\r\n        return data;\r\n    } else if (data.format[0].signatureCipher || data.format[0].cipher) {\r\n        data.format = await format_decipher(data.format, data.html5player);\r\n        return data;\r\n    } else {\r\n        return data;\r\n    }\r\n}\r\n/**\r\n * Function uses data from video_basic_info and deciphers it if it contains signatures.\r\n * @param data basic_video_info data\r\n * @returns Data containing video_details, LiveStreamData and formats of video url.\r\n */\r\nexport async function decipher_info(data: InfoData) {\r\n    if (data.LiveStreamData.isLive === true && data.LiveStreamData.hlsManifestUrl !== null) {\r\n        return data;\r\n    } else if (data.format[0].signatureCipher || data.format[0].cipher) {\r\n        data.format = await format_decipher(data.format, data.html5player);\r\n        return data;\r\n    } else {\r\n        return data;\r\n    }\r\n}\r\n/**\r\n * Function to get YouTube playlist info from a playlist url.\r\n * @param url Playlist URL\r\n * @param options incomplete and proxy to add.\r\n * @returns YouTube Playlist\r\n */\r\nexport async function playlist_info(url: string, options: PlaylistOptions = {}): Promise<YouTubePlayList> {\r\n    if (!url || typeof url !== 'string') throw new Error(`Expected playlist url, received ${typeof url}!`);\r\n    let Playlist_id: string;\r\n    if (url.startsWith('https')) {\r\n        if (yt_validate(url) !== 'playlist') throw new Error('This is not a Playlist URL');\r\n        Playlist_id = extractID(url);\r\n    } else Playlist_id = url;\r\n    const new_url = `https://www.youtube.com/playlist?list=${Playlist_id}`;\r\n\r\n    const body = await request(new_url, {\r\n        proxies: options.proxy ?? undefined,\r\n        headers: { 'accept-language': 'en-US,en-IN;q=0.9,en;q=0.8,hi;q=0.7' }\r\n    });\r\n    const response = JSON.parse(body.split('var ytInitialData = ')[1].split(';</script>')[0]);\r\n    if (response.alerts) {\r\n        if (response.alerts[0].alertWithButtonRenderer?.type === 'INFO') {\r\n            if (!options.incomplete)\r\n                throw new Error(\r\n                    `While parsing playlist url\\n${response.alerts[0].alertWithButtonRenderer.text.simpleText}`\r\n                );\r\n        } else if (response.alerts[0].alertRenderer?.type === 'ERROR')\r\n            throw new Error(`While parsing playlist url\\n${response.alerts[0].alertRenderer.text.runs[0].text}`);\r\n        else throw new Error('While parsing playlist url\\nUnknown Playlist Error');\r\n    }\r\n\r\n    const rawJSON = `${body.split('{\"playlistVideoListRenderer\":{\"contents\":')[1].split('}],\"playlistId\"')[0]}}]`;\r\n    const parsed = JSON.parse(rawJSON);\r\n    const playlistDetails = JSON.parse(body.split('{\"playlistSidebarRenderer\":')[1].split('}};</script>')[0]).items;\r\n\r\n    const API_KEY =\r\n        body.split('INNERTUBE_API_KEY\":\"')[1]?.split('\"')[0] ??\r\n        body.split('innertubeApiKey\":\"')[1]?.split('\"')[0] ??\r\n        DEFAULT_API_KEY;\r\n    const videos = getPlaylistVideos(parsed, 100);\r\n\r\n    const data = playlistDetails[0].playlistSidebarPrimaryInfoRenderer;\r\n    if (!data.title.runs || !data.title.runs.length) throw new Error('Failed to Parse Playlist info.');\r\n\r\n    const author = playlistDetails[1]?.playlistSidebarSecondaryInfoRenderer.videoOwner;\r\n    const views = data.stats.length === 3 ? data.stats[1].simpleText.replace(/[^0-9]/g, '') : 0;\r\n    const lastUpdate =\r\n        data.stats\r\n            .find((x: any) => 'runs' in x && x['runs'].find((y: any) => y.text.toLowerCase().includes('last update')))\r\n            ?.runs.pop()?.text ?? null;\r\n    const videosCount = data.stats[0].runs[0].text.replace(/[^0-9]/g, '') || 0;\r\n\r\n    const res = new YouTubePlayList({\r\n        continuation: {\r\n            api: API_KEY,\r\n            token: getContinuationToken(parsed),\r\n            clientVersion:\r\n                body.split('\"INNERTUBE_CONTEXT_CLIENT_VERSION\":\"')[1]?.split('\"')[0] ??\r\n                body.split('\"innertube_context_client_version\":\"')[1]?.split('\"')[0] ??\r\n                '<some version>'\r\n        },\r\n        id: data.title.runs[0].navigationEndpoint.watchEndpoint.playlistId,\r\n        title: data.title.runs[0].text,\r\n        videoCount: parseInt(videosCount) || 0,\r\n        lastUpdate: lastUpdate,\r\n        views: parseInt(views) || 0,\r\n        videos: videos,\r\n        url: `https://www.youtube.com/playlist?list=${data.title.runs[0].navigationEndpoint.watchEndpoint.playlistId}`,\r\n        link: `https://www.youtube.com${data.title.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url}`,\r\n        author: author\r\n            ? {\r\n                  name: author.videoOwnerRenderer.title.runs[0].text,\r\n                  id: author.videoOwnerRenderer.title.runs[0].navigationEndpoint.browseEndpoint.browseId,\r\n                  url: `https://www.youtube.com${\r\n                      author.videoOwnerRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url ||\r\n                      author.videoOwnerRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl\r\n                  }`,\r\n                  icon: author.videoOwnerRenderer.thumbnail.thumbnails.length\r\n                      ? author.videoOwnerRenderer.thumbnail.thumbnails[\r\n                            author.videoOwnerRenderer.thumbnail.thumbnails.length - 1\r\n                        ].url\r\n                      : null\r\n              }\r\n            : {},\r\n        thumbnail: data.thumbnailRenderer.playlistVideoThumbnailRenderer?.thumbnail.thumbnails.length\r\n            ? data.thumbnailRenderer.playlistVideoThumbnailRenderer.thumbnail.thumbnails[\r\n                  data.thumbnailRenderer.playlistVideoThumbnailRenderer.thumbnail.thumbnails.length - 1\r\n              ]\r\n            : null\r\n    });\r\n    return res;\r\n}\r\n/**\r\n * Function to parse Playlist from YouTube search\r\n * @param data html data of that request\r\n * @param limit No. of videos to parse\r\n * @returns Array of YouTubeVideo.\r\n */\r\nexport function getPlaylistVideos(data: any, limit = Infinity): YouTubeVideo[] {\r\n    const videos = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (limit === videos.length) break;\r\n        const info = data[i].playlistVideoRenderer;\r\n        if (!info || !info.shortBylineText) continue;\r\n\r\n        videos.push(\r\n            new YouTubeVideo({\r\n                id: info.videoId,\r\n                index: parseInt(info.index?.simpleText) || 0,\r\n                duration: parseDuration(info.lengthText?.simpleText) || 0,\r\n                duration_raw: info.lengthText?.simpleText ?? '0:00',\r\n                thumbnail: {\r\n                    id: info.videoId,\r\n                    url: info.thumbnail.thumbnails[info.thumbnail.thumbnails.length - 1].url,\r\n                    height: info.thumbnail.thumbnails[info.thumbnail.thumbnails.length - 1].height,\r\n                    width: info.thumbnail.thumbnails[info.thumbnail.thumbnails.length - 1].width\r\n                },\r\n                title: info.title.runs[0].text,\r\n                channel: {\r\n                    id: info.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.browseId || undefined,\r\n                    name: info.shortBylineText.runs[0].text || undefined,\r\n                    url: `https://www.youtube.com${\r\n                        info.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\r\n                        info.shortBylineText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url\r\n                    }`,\r\n                    icon: undefined\r\n                }\r\n            })\r\n        );\r\n    }\r\n    return videos;\r\n}\r\n/**\r\n * Function to convert [hour : minutes : seconds] format to seconds\r\n * @param duration hour : minutes : seconds format\r\n * @returns seconds\r\n */\r\nfunction parseDuration(duration: string): number {\r\n    duration ??= '0:00';\r\n    const args = duration.split(':');\r\n    let dur = 0;\r\n\r\n    switch (args.length) {\r\n        case 3:\r\n            dur = parseInt(args[0]) * 60 * 60 + parseInt(args[1]) * 60 + parseInt(args[2]);\r\n            break;\r\n        case 2:\r\n            dur = parseInt(args[0]) * 60 + parseInt(args[1]);\r\n            break;\r\n        default:\r\n            dur = parseInt(args[0]);\r\n    }\r\n\r\n    return dur;\r\n}\r\n/**\r\n * Function to get Continuation Token\r\n * @param data html data of playlist url\r\n * @returns token\r\n */\r\nexport function getContinuationToken(data: any): string {\r\n    const continuationToken = data.find((x: any) => Object.keys(x)[0] === 'continuationItemRenderer')\r\n        ?.continuationItemRenderer.continuationEndpoint?.continuationCommand?.token;\r\n    return continuationToken;\r\n}\r\n"]}